#!/usr/bin/env bash

set -eu -o pipefail

## list of subcommands
subcommands=("help" "init" "upgrade" "ports" "start" "stop" "up" "build" "run" "bash" "local" "h" "p" "s" "u" "b" "r")

project=""
command="bash"

# function to check if string is a subcommand
is_subcommand() {
	[[ " ${subcommands[@]} " =~ " $1 " ]]
}

## check if any arguments are given
if [[ $# -eq 0 ]]; then
	true;
	# use default settings
else
	# check if project is given
	if is_subcommand "$1"
	then
		true;
	else
		project="$1"
		shift
	fi
fi

# check if project is set
if [[ -z "$project" ]]; then
	# no project given
	# check if /tmp/dev.last.project exists
	if [[ -f /tmp/dev.last.project ]]; then
		project=$(cat /tmp/dev.last.project)
	fi
fi

if [[ -z "$project" ]]; then
		# no project given, no project guessed
		echo "Couldn't detect project, please provide a project name"
		exit 1
	
fi

# check command
if [[ $# -eq 0 ]]; then
	true;
else
	if is_subcommand "$1"
	then
		command=$1
		shift
	else
		echo "Invalid command: $1"
		exit 2
	fi
fi

# check if project exists in ~/projects
if [[ ! -d "${HOME}/projects/${project}" ]]; then
	echo "Project ${project} not found in ~/projects"
	exit 1
fi

# check if project has a container directory
if [[ ! -d "${HOME}/projects/${project}/container" ]]; then
	echo "Project ${project} has no container directory"
else
	# check if command is init
	if [[ "$command" == "init" ]]; then
		# confirm init
	        echo "Init project $project"
		echo "This will clone the container repository into $HOME/projects/$project/container"
		echo -n "Press any key to continue or Ctrl-C to cancel"
		read -n 1 -s
		echo
		git clone https://github.com/f0i/container
		cd container
		git submodule init
		git submodule update
		exit 0
	fi

fi

# save project name
echo "${project}" > /tmp/dev.last.project

# change to project directory
cd "${HOME}/projects/${project}/container"

container="$project-dev-1"

# function to show usage information
help ()
{
	echo "Connect to a development environment inside docker."
	echo ""
	echo "$0 [<project>] [<command> [args...]]"
	echo ""
	echo "<project>: name of a project, located in ~/projects/<project>."
	echo "           Must contain a subdirectory called ./container (see https://github.com/f0i/container)"
	echo "           If no project is given, the last used project will be used."
	echo ""
	echo "<command>: one of the following commands:"
	echo "  help: show this help"
	echo "  ports: set port mappings"
	echo "  start stop up build: docker-compose commands"
	echo "  run: run a command inside the container"
	echo "  bash (default): start a bash shell inside the container"
	echo "  init: add ./container to an existing project"
	echo "  upgrade: update the container repository"
	echo "  h p s u b r: shortcuts for help ports start up build run"
}

# execute command
case "$command" in
	"h"|"help")
		help
		;;
	"p"|"ports")
		container/bin/ports "$@"
		;;
	"s"|"start")
		docker-compose -p "$project" up -d
		;;
	"stop")
		docker-compose -p "$project" stop
		;;
	"up"|"u")
		docker-compose -p "$project" up
		;;
	"build"|"b")
		docker-compose -p "$project" build
		;;
	"run"|"r")
		docker exec -itu node -w /workspace "$container" "$@"
		;;
	"bash")
		docker exec -itu node -w /workspace "$container" bash
		;;
	"local")
		cd ..
		bash
		;;
	"init")
		# already handeld above if needed
		echo "Project $project already initialized"
		echo "Use $0 upgrade to update the container repository"
		exit 3
		;;
	"upgrade")
		# git pull and update submodules
		git pull
		git submodule update --init --recursive
		;;
	*)
		echo "Invalid command: $command"; 
		exit 4
		;;
esac

