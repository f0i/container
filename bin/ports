#!/usr/bin/env bash

set -eu -o pipefail

# check if there is at least one argument
if [ "$#" -lt 1 ]; then
	echo "Usage: $0 <project> [<port_host>[:<port_container>]] ..."
	exit 1
fi

project="$1"
container="$1-dev-1"
shift

# sore or restore ports
cd "$HOME/projects/$project/container/cache"
if [ "$#" -eq 0 ]; then
    if [ ! -f "./ports" ]; then
        echo "No ports provided and no previous port mappings found for $project."
        exit 2
    fi
    echo "Reusing previous port mappings for $project."
    set -- $(cat "./ports") # set arguments
else
    # Store the current port mappings for this project
    echo "$@" > "./ports"
fi

# start ssh
docker exec -itu node -w /workspace "$container" \
	bash -c 'sudo service ssh start'

# extract IP address of docker container from via docker cli
ip=$(docker exec -itu node -w /workspace "$container" \
	bash -c 'ip address show scope global | grep inet | sed "s/.*inet.\([0-9.]*\).*/\1/"' | tr -d '[:space:]')

# concatenate all port mappings for local port forwarding (-L)
sshArgs=""
for portMapping in "$@"; do
	portContainer=${portMapping#*:}
	portHost=${portMapping%%:*}
	sshArgs+=" -L $portHost:localhost:$portContainer"
done

# output the ssh command and print "connected" when the connection is established
echo " >" ssh $sshArgs "root@$ip"
ssh $sshArgs "root@$ip" "echo connected; sleep infinity"
